# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Publish Packages
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  Build_and_Test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v3

    # Restore packages dependencies
    - name: Install dependencies
      run: dotnet restore

    # Build packages
    - name: Build
      run: dotnet build --configuration Release --no-restore

    # Run tests
    - name: Run tests
      run: dotnet test --configuration Release

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    # - run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }}

  #  # Publish the NuGet package as an artifact, so they can be used in the following jobs
  #  - uses: actions/upload-artifact@v3
  #    with:
  #      name: nuget
  #      if-no-files-found: error
  #      retention-days: 7
  #      path: ${{ env.NuGetDirectory }}/*.nupkg

  #validate_nuget:
  #  runs-on: ubuntu-latest
  #  needs: [ create_nuget ]
  #  steps:
  #    # Install the .NET SDK indicated in the global.json file
  #    - name: Setup .NET
  #      uses: actions/setup-dotnet@v3

  #    # Download the NuGet package created in the previous job
  #    - uses: actions/download-artifact@v3
  #      with:
  #        name: nuget
  #        path: ${{ env.NuGetDirectory }}

  #    - name: Install nuget validator
  #      run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

  #    # Validate metadata and content of the NuGet package
  #    # https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
  #    # If some rules are not applicable, you can disable them
  #    # using the --excluded-rules or --excluded-rule-ids option
  #    - name: Validate package
  #      run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")

  #run_test:
  #  runs-on: ubuntu-latest
  #  steps:
  #  - uses: actions/checkout@v3
  #  - name: Setup .NET
  #    uses: actions/setup-dotnet@v3
  #  - name: Run tests
  #    run: dotnet test --configuration Release

  Deploy:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ Build_and_Test ]
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
  
      # Restore packages dependencies
      - name: Install dependencies
        run: dotnet restore

      # Build packages
      - name: Build
        run: dotnet build --configuration Release --no-restore

      # Publish packages
      - name: Publish FluentEmailer.Core
        uses: brandedoutcast/publish-nuget@v2.5.5
        with:
            PROJECT_FILE_PATH: Src/FluentEmailer.Core/FluentEmailer.Core.csproj
            VERSION_FILE_PATH: Src/Directory.Build.props
            NUGET_KEY: ${{secrets.NUGET_APIKEY}}
            NUGET_SOURCE: https://api.nuget.org
            INCLUDE_SYMBOLS: false

      - name: Publish FluentEmailer.Smtp
        uses: brandedoutcast/publish-nuget@v2.5.5
        with:
            PROJECT_FILE_PATH: Src/Senders/FluentEmailer.Smtp/FluentEmailer.Smtp.csproj
            VERSION_FILE_PATH: Src/Directory.Build.props
            NUGET_KEY: ${{secrets.NUGET_APIKEY}}
            NUGET_SOURCE: https://api.nuget.org
            INCLUDE_SYMBOLS: false

      #- name: Publish FluentEmailer.Sendgrid
      #  uses: brandedoutcast/publish-nuget@v2.5.5
      #  with:
      #      PROJECT_FILE_PATH: Src/Senders/FluentEmailer.SendGrid/FluentEmailer.SendGrid.csproj
      #      VERSION_FILE_PATH: Src/Directory.Build.props
      #      NUGET_KEY: ${{secrets.NUGET_APIKEY}}
      #      NUGET_SOURCE: https://api.nuget.org
      #      INCLUDE_SYMBOLS: false

      #- name: Publish FluentEmailer.MailTrap
      #  uses: brandedoutcast/publish-nuget@v2.5.5
      #  with:
      #      PROJECT_FILE_PATH: Src/Senders/FluentEmailer.Mailtrap/FluentEmailer.Mailtrap.csproj
      #      NUGET_KEY: ${{secrets.NUGET_APIKEY}}
      #      NUGET_SOURCE: https://api.nuget.org

      #- name: Publish FluentEmailer.MailKit
      #  uses: brandedoutcast/publish-nuget@v2.5.5
      #  with:
      #      PROJECT_FILE_PATH: Src/Senders/FluentEmailer.MailKit/FluentEmailer.MailKit.csproj
      #      VERSION_FILE_PATH: Src/Directory.Build.props
      #      NUGET_KEY: ${{secrets.NUGET_APIKEY}}
      #      NUGET_SOURCE: https://api.nuget.org
      #      INCLUDE_SYMBOLS: false

      #- name: Publish FluentEmailer.Mailgun
      #  uses: brandedoutcast/publish-nuget@v2.5.5
      #  with:
      #      PROJECT_FILE_PATH: Src/Senders/FluentEmailer.Mailgun/FluentEmailer.Mailgun.csproj
      #      VERSION_FILE_PATH: Src/Directory.Build.props
      #      NUGET_KEY: ${{secrets.NUGET_APIKEY}}
      #      NUGET_SOURCE: https://api.nuget.org
      #      INCLUDE_SYMBOLS: false
      
      - name: Publish FluentEmailer.MailerSend
        uses: brandedoutcast/publish-nuget@v2.5.5
        with:
            PROJECT_FILE_PATH: Src/Senders/FluentEmailer.MailerSend/FluentEmailer.MailerSend.csproj
            VERSION_FILE_PATH: Src/Directory.Build.props
            NUGET_KEY: ${{secrets.NUGET_APIKEY}}
            NUGET_SOURCE: https://api.nuget.org
            INCLUDE_SYMBOLS: false

      #- name: Publish FluentEmailer.Razor
      #  uses: brandedoutcast/publish-nuget@v2.5.5
      #  with:
      #      PROJECT_FILE_PATH: Src/Renderers/FluentEmailer.Razor/FluentEmailer.Razor.csproj
      #      VERSION_FILE_PATH: Src/Directory.Build.props
      #      NUGET_KEY: ${{secrets.NUGET_APIKEY}}
      #      NUGET_SOURCE: https://api.nuget.org
      #      INCLUDE_SYMBOLS: false

      - name: Publish FluentEmailer.Liquid
        uses: brandedoutcast/publish-nuget@v2.5.5
        with:
            PROJECT_FILE_PATH: Src/Renderers/FluentEmailer.Liquid/FluentEmailer.Liquid.csproj
            VERSION_FILE_PATH: Src/Directory.Build.props
            NUGET_KEY: ${{secrets.NUGET_APIKEY}}
            NUGET_SOURCE: https://api.nuget.org
            INCLUDE_SYMBOLS: false

      # This is currently maintained separately
      #- name: Publish FluentEmailer.Graph
      #  uses: brandedoutcast/publish-nuget@v2.5.5
      #  with:
      #      PROJECT_FILE_PATH: Src/Senders/FluentEmailer.Graph/FluentEmailer.Graph.csproj
      #      NUGET_KEY: ${{secrets.NUGET_APIKEY}}
      #      NUGET_SOURCE: https://api.nuget.org
